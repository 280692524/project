Linux挂载windows共享目录
mount -t cifs -o username:xxx,password:xxx //192.168.14.106/work /mnt/work

安装Bison Flex OpenSSL

yum install openssl-devel源才成功



编译gSOAP源码的命令如下：
cd gsoap-2.8
./configure --with-openssl=/usr/local/ssl
make
make install



使用wsdl2h工具，根据WSDL产生头文件
创建一个目录samples/onvif，用于存放生成的ONVIF框架源码。
cd gsoap-2.8/gsoap/
mkdir -p samples/onvif
wsdl2h -P -x -c -s -t ./typemap.dat -o samples/onvif/onvif.h https://www.onvif.org/ver10/network/wsdl/remotediscovery.wsdl https://www.onvif.org/ver10/device/wsdl/devicemgmt.wsdl https://www.onvif.org/ver10/media/wsdl/media.wsdl


因「鉴权（认证）」需要,修改onvif.h头文件
添加 #import "wsse.h"


修改import\wsa5.h文件
将int SOAP_ENV__Fault修改为int SOAP_ENV__Fault_alex



拷贝其他还有会用的源码
cp stdsoap2.c stdsoap2.h plugin/wsaapi.c plugin/wsaapi.h custom/duration.c custom/duration.h  samples/onvif/


关联自己的命名空间，修改stdsoap2.c文件
在samples\onvif\stdsoap2.h中有命名空间「namespaces变量」的定义声明，如下所示：
extern SOAP_NMAC struct Namespace namespaces[];



查找源文件.c和头文件.h
上面所创建的onvif文件夹，创建src和include分别放置源文件.c和头文件.h，创建lib放置生成的动态库和静态库。



百度写好CMakeList.txt文件
参考链接：
https://gitee.com/galileolvpo/mtcnn_ncnn/blob/master/CMakeLists.txt



新建文件夹build 切换至bulid目录，执行 cmake ..  再make

生成可执行文件

./执行文件名


动态库编译：
	eg：新建func.c
		将func.c编译为动态库，编译命令：

            gcc hello.c -o hello.o -c -fPIC
            gcc hello.o -shared -o libhello.so               （注其中libfunc.so,lib为前缀，.so是后缀，中间func是库的名字）
		新建main.c   在main.c中调用动态库中的func()函数。
		编译main.c并调用动态库libfunc.so。
		
		
		命令：gcc main.c -o main -L 库的路径 -l 库名    

              gcc main.c -o main -L . -l hello            (点代表当前路径)
		
		执行main，找不到库
		
		将动态库拷贝一份到/usr/lib/路径下，命令：sudo cp libfunc.so /usr/lib

静态库编译：
	eg：新建目录static,cd /static 新建func.c
			gcc hello.c -o hello.o -c 
            ar -crv libhello.a hello.o               （注lib为前缀，静态库以.a为后缀,中间部分func为库的名字）

			在static路径下新建main.c文件：vi main.c;在main.c中调用静态库中的func()函数。
			
			编译main.c并调用静态库libfunc.so。命令：gcc main.c -o main -L 库的路径 -l 库名    

            gcc main.c -o main -L . -l hello            (点代表当前路径)


在window上编写的shell脚本在Linux上执行需要先  sed -i 's/\r$//' 文件名  再 ./文件名.sh

mount -t cifs -o username=syf,password=syf //192.168.14.106/src ./src
mount -t cifs -o username=syf,password=syf //192.168.14.106/src2 ./src
mount -t cifs -o username=syf,password=syf //192.168.14.106/share ./work

cmd看日志
adb shell cat /sdcard/server_http.log

杀ADB的进程
taskkill /f /im adb.exe

查看消息队列
ipcs -q

删除消息队列ID
ipcrm -q id

pthread并非Linux系统的默认库，编译时注意加上-lpthread参数，以调用链接库
gcc -o producer_consumer.out producer_consumer.c -lpthread

编译多线程时，在CMakeLists.txt中加入
find_package (Threads)
add_executable (myapp main.cpp ...)
target_link_libraries (myapp ${CMAKE_THREAD_LIBS_INIT})

/**/
            